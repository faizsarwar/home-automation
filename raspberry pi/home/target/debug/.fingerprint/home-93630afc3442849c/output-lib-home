{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":2950,"byte_end":2961,"line_start":98,"line_end":98,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        match Gpio::new() {","highlight_start":15,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:98:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        match Gpio::new() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":3035,"byte_end":3048,"line_start":100,"line_end":100,"column_start":31,"column_end":44,"is_primary":true,"text":[{"text":"            Ok(gpio) => match gpio.get(pin) {","highlight_start":31,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:100:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Ok(gpio) => match gpio.get(pin) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":true,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/output_devices.rs","byte_start":2986,"byte_end":3003,"line_start":99,"line_end":99,"column_start":23,"column_end":40,"is_primary":false,"text":[{"text":"            Err(e) => panic!(\"{:?}\", e),","highlight_start":23,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":1},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":1},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":1},{"text":"    });","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26272,"byte_end":26426,"line_start":789,"line_end":792,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":1},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":1},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:99:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(e) => panic!(\"{:?}\", e),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":580,"byte_end":646,"line_start":16,"line_end":16,"column_start":9,"column_end":75,"is_primary":true,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/output_devices.rs","byte_start":2986,"byte_end":3003,"line_start":99,"line_end":99,"column_start":23,"column_end":40,"is_primary":false,"text":[{"text":"            Err(e) => panic!(\"{:?}\", e),","highlight_start":23,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:99:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(e) => panic!(\"{:?}\", e),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":3163,"byte_end":3188,"line_start":103,"line_end":103,"column_start":26,"column_end":51,"is_primary":true,"text":[{"text":"                    pin: pin.into_io(Mode::Output),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:103:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    pin: pin.into_io(Mode::Output),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":true,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/output_devices.rs","byte_start":3077,"byte_end":3094,"line_start":101,"line_end":101,"column_start":27,"column_end":44,"is_primary":false,"text":[{"text":"                Err(e) => panic!(\"{:?}\", e),","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26272,"byte_end":26426,"line_start":789,"line_end":792,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:101:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Err(e) => panic!(\"{:?}\", e),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":580,"byte_end":646,"line_start":16,"line_end":16,"column_start":9,"column_end":75,"is_primary":true,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/output_devices.rs","byte_start":3077,"byte_end":3094,"line_start":101,"line_end":101,"column_start":27,"column_end":44,"is_primary":false,"text":[{"text":"                Err(e) => panic!(\"{:?}\", e),","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/faiz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:101:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Err(e) => panic!(\"{:?}\", e),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"destructors cannot be evaluated at compile-time","code":{"code":"E0493","explanation":"A type with a `Drop` implementation was destructured when trying to initialize\na static item.\n\nErroneous code example:\n\n```compile_fail,E0493\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { ..Foo { field1: DropType::A } }; // error!\n```\n\nThe problem here is that if the given type or one of its fields implements the\n`Drop` trait, this `Drop` implementation cannot be called during the static\ntype initialization which might cause a memory leak. To prevent this issue,\nyou need to instantiate all the static type's fields by hand.\n\n```\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n                                               // by hand.\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":3035,"byte_end":3048,"line_start":100,"line_end":100,"column_start":31,"column_end":44,"is_primary":true,"text":[{"text":"            Ok(gpio) => match gpio.get(pin) {","highlight_start":31,"highlight_end":44}],"label":"constant functions cannot evaluate destructors","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0493]\u001b[0m\u001b[0m\u001b[1m: destructors cannot be evaluated at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:100:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Ok(gpio) => match gpio.get(pin) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconstant functions cannot evaluate destructors\u001b[0m\n\n"}
{"message":"destructors cannot be evaluated at compile-time","code":{"code":"E0493","explanation":"A type with a `Drop` implementation was destructured when trying to initialize\na static item.\n\nErroneous code example:\n\n```compile_fail,E0493\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { ..Foo { field1: DropType::A } }; // error!\n```\n\nThe problem here is that if the given type or one of its fields implements the\n`Drop` trait, this `Drop` implementation cannot be called during the static\ntype initialization which might cause a memory leak. To prevent this issue,\nyou need to instantiate all the static type's fields by hand.\n\n```\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n                                               // by hand.\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":3020,"byte_end":3024,"line_start":100,"line_end":100,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"            Ok(gpio) => match gpio.get(pin) {","highlight_start":16,"highlight_end":20}],"label":"constant functions cannot evaluate destructors","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0493]\u001b[0m\u001b[0m\u001b[1m: destructors cannot be evaluated at compile-time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:100:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Ok(gpio) => match gpio.get(pin) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconstant functions cannot evaluate destructors\u001b[0m\n\n"}
{"message":"destructors cannot be evaluated at compile-time","code":{"code":"E0493","explanation":"A type with a `Drop` implementation was destructured when trying to initialize\na static item.\n\nErroneous code example:\n\n```compile_fail,E0493\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { ..Foo { field1: DropType::A } }; // error!\n```\n\nThe problem here is that if the given type or one of its fields implements the\n`Drop` trait, this `Drop` implementation cannot be called during the static\ntype initialization which might cause a memory leak. To prevent this issue,\nyou need to instantiate all the static type's fields by hand.\n\n```\nenum DropType {\n    A,\n}\n\nimpl Drop for DropType {\n    fn drop(&mut self) {}\n}\n\nstruct Foo {\n    field1: DropType,\n}\n\nstatic FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n                                               // by hand.\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":2950,"byte_end":2961,"line_start":98,"line_end":98,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        match Gpio::new() {","highlight_start":15,"highlight_end":26}],"label":"constant functions cannot evaluate destructors","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0493]\u001b[0m\u001b[0m\u001b[1m: destructors cannot be evaluated at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:98:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        match Gpio::new() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconstant functions cannot evaluate destructors\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":9463,"byte_end":9497,"line_start":287,"line_end":287,"column_start":30,"column_end":64,"is_primary":true,"text":[{"text":"            device: Arc::new(Mutex::new(OutputDevice::new(pin))),","highlight_start":30,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:287:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            device: Arc::new(Mutex::new(OutputDevice::new(pin))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":9454,"byte_end":9498,"line_start":287,"line_end":287,"column_start":21,"column_end":65,"is_primary":true,"text":[{"text":"            device: Arc::new(Mutex::new(OutputDevice::new(pin))),","highlight_start":21,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:287:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            device: Arc::new(Mutex::new(OutputDevice::new(pin))),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constant functions are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/output_devices.rs","byte_start":9522,"byte_end":9554,"line_start":288,"line_end":288,"column_start":23,"column_end":55,"is_primary":true,"text":[{"text":"            blinking: Arc::new(AtomicBool::new(false)),","highlight_start":23,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constant functions are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output_devices.rs:288:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            blinking: Arc::new(AtomicBool::new(false)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 13 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 13 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0015, E0493.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0015, E0493.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0015`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0015`.\u001b[0m\n"}
